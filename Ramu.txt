using System.Web.Http;
using System.Data.SqlClient;

public class UserController : ApiController
{
    private string connectionString = "YourConnectionString";

    [HttpPost]
    public IHttpActionResult CreateUser([FromBody] User user)
    {
        using (SqlConnection connection = new SqlConnection(connectionString))
        {
            connection.Open();

            using (SqlCommand command = new SqlCommand("spAddUser", connection))
            {
                command.CommandType = System.Data.CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@Username", user.Username);
                command.Parameters.AddWithValue("@Password", user.Password);
                command.ExecuteNonQuery();
            }
        }

        return Ok();
    }

    [HttpPost]
    public IHttpActionResult Login([FromBody] User user)
    {
        // Implement the logic to check user credentials using the stored procedure.
        // Return appropriate response based on login success/failure.
    }

    [HttpPut]
    public IHttpActionResult UpdatePasswordByUsername([FromBody] User user)
    {
        // Implement the logic to update the user's password using the stored procedure.
        // Return appropriate response based on the update success/failure.
    }
}

--------------------------------------------------------

CREATE DATABASE BlogDB;

USE BlogDB;



CREATE TABLE Users
(
    UserID INT Primary Key NOT NULL
    AUTO_INCREMENT,
    Username VARCHAR
    (20) NOT NULL UNIQUE,
    PW VARCHAR
    (50) NOT NULL,
);

    CREATE TABLE Posts (
    PostID INT Primary Key AUTO_INCREMENT NOT NULL,
    UserID INT NOT NULL FOREIGN KEY REFERENCES Users
    (UserID),
    Title VARCHAR
    (200) NOT NULL,
    Comment VARCHAR
    (MAX) NOT NULL,
    FOREIGN KEY
    (UserID) REFERENCES Users
    (UserID),
    PostDate DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
);

    CREATE TABLE Comments (
    CID INT Primary Key AUTO_INCREMENT NOT NULL,
    UserID INT NOT NULL FOREIGN KEY REFERENCES Users
    (UserID),
    PID INT NOT NULL FOREIGN KEY REFERENCES Posts
    (PID),
    Comment VARCHAR
    (MAX) NOT NULL,
    C_Time DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
);

    -- Stored Procedures

    CREATE Procedures spAddUser
    @Username VARCHAR
    (20),
    @PW VARCHAR
    (50)
AS
    BEGIN
        INSERT INTO Users
            (Username, PW)
        VALUES
            (@Username, @PW);
    END

    CREATE PROCEDURE spCheckUser
        @Username VARCHAR(20),
        @PW VARCHAR(50),
        @Exists BIT OUTPUT
    AS
    BEGIN
        IF EXISTS (SELECT 1
        FROM Users
        WHERE Username = @Username AND PW = @PW)
        SET @Exists = 1;
    ELSE
        SET @Exists = 0;
    END
GO

    CREATE PROCEDURE sp_ChangePW
        @Username VARCHAR(20),
        @PW VARCHAR(50),
        @Updated INT OUTPUT
    AS
    BEGIN
        UPDATE Users
    SET PW = @PW
    WHERE Username = @Username;

    END
GO

    CREATE PROCEDURE sp_CreatePost
        @Username VARCHAR(20),
        @Comment VARCHAR(MAX) = NULL
    AS
    BEGIN
        DECLARE @UserID INT;

        SELECT @UserID = UserID
        FROM Users
        WHERE Username = @Username;

        INSERT INTO Posts
            (UserID, Comment, PublishDate)
        VALUES
            (@UserID, Comment, GETDATE());
    END
GO

    CREATE PROCEDURE sp_PostByIDorKeyword
        @Username VARCHAR(20) = NULL,
        @Keyword VARCHAR(100) = NULL
    AS
    BEGIN
        SELECT p.PID, u.Username, p., p.Comment, p.PublishDate
        FROM Posts p
            INNER JOIN Users u ON p.UserID = u.UserID
        WHERE (u.Username = @Username OR @Username IS NULL)
            AND (p. LIKE '%' + @Keyword + '%' OR @Keyword IS NULL);
    END
GO

    CREATE PROCEDURE sp_AddComment
        @PID INT,
        @Comment VARCHAR(MAX)
    AS
    BEGIN
        INSERT INTO Comments
            (UserID, PID, Content, CommentDate)
        VALUES
            ((SELECT UserID
                FROM Posts
                WHERE PID = @PID), @PID, @Comment, GETDATE());
    END
GO

    CREATE PROCEDURE sp_FindPostsByUser
        @Username VARCHAR(20)
    AS
    BEGIN
        SELECT u.Username, p.PID, p. AS PostContent, p.PublishDate
        FROM Users u
            INNER JOIN Posts p ON u.UserID = p.UserID
        WHERE u.Username = @Username;
    END
GO

    CREATE PROCEDURE sp_SearchKeyword
        @SearchText VARCHAR(MAX)
    AS
    BEGIN
        SELECT u.Username, p.PID, p. AS PostContent, p.PublishDate
        FROM Users u
            INNER JOIN Posts p ON u.UserID = p.UserID
        WHERE p. LIKE '%' + @SearchText + '%';
    END
GO